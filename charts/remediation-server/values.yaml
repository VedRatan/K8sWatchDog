# Default values for charts.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

labels:
  app: remediation-server

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  imageRegistry: docker.io
  imageRepository: lusciousmaestro
  registryUserName:
  registryPassword:
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.

# This is where you can put required/optional configuration for your application.
config:
  # the ai backend to provide remediation ex: gemini, openai, cohere etc. Currently supported - gemini (optional)
  aiBackend:
  # the apiKey for the ai backend (required) (by default you need to provide the gemini api key if aiBackend field is left empty or set to gemini.)
  aiApiKey:
  # the url of the k8sAgent service to apply the remediated YAML in k8s-cluster. (required)
  # ex: <ip>:<port> (omit the port field if k8s-agent service is listening on port 80)
  k8sAgentUrl:
  # configure the remediation-service to use https (insecure: false) or http (insecure: true) to communicate to k8s-agent-service (optional)
  insecure:


securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000


resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  # httpGet:
  #   path: /
  #   port: http
readinessProbe:
  # httpGet:
  #   path: /
  #   port: http


# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true
